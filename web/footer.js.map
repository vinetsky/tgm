{"version":3,"sources":["meta.js","app.js"],"names":[],"mappingsfile":"footer.js","sourcesContent":["const inputLocation = `\r\n{\r\n    \"LocoType\": \"ТГМ6\",\r\n    \"LocoNumber\": \"1234\",\r\n    \"Timestamp\":[\r\n         \"2010-09-11 10:27:29\",\r\n         \"2010-09-11 10:27:37\",\r\n         \"2010-09-11 10:27:45\",\r\n         \"2010-09-11 10:32:32\",\r\n         \"2010-09-11 10:32:44\",\r\n         \"2010-09-11 10:32:56\",\r\n         \"2010-09-11 10:33:04\",\r\n         \"2010-09-11 10:33:14\",\r\n         \"2010-09-11 10:33:24\",\r\n         \"2010-09-11 10:33:34\",\r\n         \"2010-09-11 10:33:48\",\r\n         \"2010-09-11 10:34:08\",\r\n         \"2010-09-11 10:34:18\",\r\n         \"2010-09-11 10:34:28\",\r\n         \"2010-09-11 10:34:36\",\r\n         \"2010-09-11 10:34:44\",\r\n         \"2010-09-11 10:34:52\",\r\n         \"2010-09-11 10:35:00\",\r\n         \"2010-09-11 10:35:08\",\r\n         \"2010-09-11 10:35:14\",\r\n         \"2010-09-11 10:35:22\",\r\n         \"2010-09-11 10:35:30\",\r\n         \"2010-09-11 10:35:36\",\r\n         \"2010-09-11 10:35:44\",\r\n         \"2010-09-11 10:35:52\",\r\n         \"2010-09-11 10:36:00\",\r\n         \"2010-09-11 10:36:08\",\r\n         \"2010-09-11 10:36:16\",\r\n         \"2010-09-11 11:15:50\",\r\n         \"2010-09-11 11:16:11\",\r\n         \"2010-09-11 11:16:25\",\r\n         \"2010-09-11 11:16:36\",\r\n         \"2010-09-11 11:16:47\",\r\n         \"2010-09-11 11:17:02\",\r\n         \"2010-09-11 11:17:11\",\r\n         \"2010-09-11 11:17:19\",\r\n         \"2010-09-11 11:17:28\",\r\n         \"2010-09-11 11:17:38\",\r\n         \"2010-09-11 11:18:16\",\r\n         \"2010-09-11 11:18:28\",\r\n         \"2010-09-11 11:18:40\",\r\n         \"2010-09-11 11:19:19\",\r\n         \"2010-09-11 11:21:48\",\r\n         \"2010-09-11 11:22:09\",\r\n         \"2010-09-11 11:22:25\",\r\n         \"2010-09-11 11:22:40\",\r\n         \"2010-09-11 11:22:55\",\r\n         \"2010-09-11 11:23:09\",\r\n         \"2010-09-11 11:23:25\",\r\n         \"2010-09-11 11:23:38\",\r\n         \"2010-09-11 11:23:50\",\r\n         \"2010-09-11 20:39:38\",\r\n         \"2010-09-11 20:40:36\",\r\n         \"2010-09-11 20:41:01\",\r\n         \"2010-09-11 20:42:34\",\r\n         \"2010-09-11 20:43:13\"\r\n    ],\r\n    \"Latitude\":[\r\n        59.13262376,\r\n        59.13253209,\r\n        59.13235906,\r\n        59.13225019,\r\n        59.13220035,\r\n        59.13221238,\r\n        59.13234531,\r\n        59.13259798,\r\n        59.13276471,\r\n        59.13291826,\r\n        59.1330701,\r\n        59.1329091,\r\n        59.13285581,\r\n        59.13291826,\r\n        59.13312797,\r\n        59.133407,\r\n        59.13373874,\r\n        59.13406361,\r\n        59.13439134,\r\n        59.13465604,\r\n        59.13494825,\r\n        59.1352164,\r\n        59.13543813,\r\n        59.13557679,\r\n        59.13571315,\r\n        59.13569138,\r\n        59.1357269,\r\n        59.13584321,\r\n        59.13577675,\r\n        59.13570398,\r\n        59.13563466,\r\n        59.13559054,\r\n        59.13547881,\r\n        59.13526968,\r\n        59.13496945,\r\n        59.13468813,\r\n        59.13443202,\r\n        59.13414611,\r\n        59.13300764,\r\n        59.13283289,\r\n        59.13280997,\r\n        59.13329412,\r\n        59.13313713,\r\n        59.13293259,\r\n        59.13287128,\r\n        59.13267075,\r\n        59.13244443,\r\n        59.1322628,\r\n        59.13218774,\r\n        59.13218316,\r\n        \"NA\",\r\n        59.13219462,\r\n        59.13216826,\r\n        59.13212414,\r\n        59.1321356,\r\n        59.13204278\r\n    ],\r\n    \"Longitude\":[\r\n        37.84800256,\r\n        37.84717521,\r\n        37.8464126,\r\n        37.84562192,\r\n        37.84462841,\r\n        37.84357818,\r\n        37.84280412,\r\n        37.84206615,\r\n        37.84126171,\r\n        37.84031862,\r\n        37.83947179,\r\n        37.84035587,\r\n        37.84135511,\r\n        37.842332,\r\n        37.84314789,\r\n        37.8439231,\r\n        37.84461008,\r\n        37.84537841,\r\n        37.84603159,\r\n        37.84670424,\r\n        37.84753445,\r\n        37.84822315,\r\n        37.848917,\r\n        37.84973519,\r\n        37.85063759,\r\n        37.85156808,\r\n        37.85247851,\r\n        37.85337862,\r\n        37.85251575,\r\n        37.85164485,\r\n        37.85080203,\r\n        37.84994374,\r\n        37.84907227,\r\n        37.84832456,\r\n        37.84770233,\r\n        37.84703942,\r\n        37.84634786,\r\n        37.8456712,\r\n        37.84294564,\r\n        37.84213948,\r\n        37.84123421,\r\n        37.83889826,\r\n        37.83964425,\r\n        37.84037993,\r\n        37.84123364,\r\n        37.84195327,\r\n        37.84267463,\r\n        37.84342635,\r\n        37.84428235,\r\n        37.84518762,\r\n        \"NA\",\r\n        37.84278292,\r\n        37.84368704,\r\n        37.84454362,\r\n        37.84546493,\r\n        37.84631291\r\n    ]\r\n}\r\n`;\r\n\r\nconst inputTemperatures = `\r\n{\r\n    \"LocoType\": \"ТГМ6\",\r\n    \"LocoNumber\": \"1234\",\r\n    \"Timestamp\":[\r\n        \"2010-09-11 10:00:00\",\r\n        \"2010-09-11 11:00:01\",\r\n        \"2010-09-11 11:59:55\",\r\n        \"2010-09-11 21:00:00\"\r\n    ],\r\n    \"OutsideTemp\":[\r\n        21,\r\n        25,\r\n        26,\r\n        23\r\n    ]\r\n}\r\n`;\r\n\r\nconst Meta = {\r\n    location: JSON.parse(inputLocation),\r\n    temperatures: JSON.parse(inputTemperatures),\r\n};\r\n\r\n","const mappApp = {\r\n    go() {\r\n        const track = this.getTrack();\r\n        this.locoMap = L.map('js-map', {\r\n            attributionControl: false\r\n        });\r\n\r\n        const sumPoint = track.reduce((acc, waypoint) => ({ lat: acc.lat + waypoint.lat, lng: acc.lng + waypoint.lng }), { lat: 0, lng: 0 });\r\n        const mapCenter = [L.Util.formatNum(sumPoint.lat / track.length), L.Util.formatNum(sumPoint.lng / track.length)];\r\n\r\n        const wayPoints = track.map(({ lat, lng }) => [lat, lng]);\r\n        const route = L.polyline(wayPoints, {\r\n            dashArray: '7, 12',\r\n            dashOffset: '0',\r\n            color: '#6A359B',\r\n            opacity: 0.8,\r\n            weight: 3\r\n        }).addTo(this.locoMap);\r\n        this.shadowRoute = L.polyline(wayPoints, {\r\n            color: 'red',\r\n            opacity: 0,\r\n            weight: 30\r\n        }).addTo(this.locoMap);\r\n\r\n        this.shadowRoute.on('mousemove', e => this.dispayInfo(e, track));\r\n        this.locoMap.on('mousemove', e => this.updateCursorByDistance(e));\r\n\r\n        this.locoMap.setView(mapCenter, 16).fitBounds(route.getBounds());\r\n\r\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attributionControl: false\r\n        }).addTo(this.locoMap);\r\n    },\r\n\r\n    updateCursorByDistance(e) {\r\n        const maximalRange = this.shadowRoute.getLatLngs().reduce((acc, latLng, i, arr) => {\r\n            if (i === 0) {\r\n                return acc;\r\n            }\r\n            return latLng.distanceTo(arr[i - 1]) > acc ? latLng.distanceTo(arr[i - 1]) : acc;\r\n        }, -Infinity);\r\n\r\n        const minimalRange = this.shadowRoute\r\n            .getLatLngs()\r\n            .reduce((acc, latLng) => (e.latlng.distanceTo(latLng) < acc ? e.latlng.distanceTo(latLng) : acc), Infinity);\r\n        const oldCursorValue = this.cursorInRange;\r\n        this.cursorInRange = minimalRange < Math.round(maximalRange / 2);\r\n        if (this.circle && oldCursorValue && !this.cursorInRange) {\r\n            this.circle.remove();\r\n        }\r\n    },\r\n\r\n    async dispayInfo(e, track) {\r\n        const { lat, lng } = e.latlng;\r\n\r\n        if (this.drawRestricted) {\r\n            return;\r\n        }\r\n        this.drawRestricted = true;\r\n\r\n        if (this.circle) {\r\n            this.circle.remove();\r\n        }\r\n\r\n        const nearestPoint = this.getNiarestPoint({ lat, lng }, track);\r\n\r\n        if (this.cursorInRange) {\r\n            this.circle = L.circle([nearestPoint.lat, nearestPoint.lng], {\r\n                color: 'transparent',\r\n                fillColor: 'red',\r\n                fillOpacity: 0.5,\r\n                radius: 10\r\n            })\r\n                .addTo(this.locoMap)\r\n                .bindPopup(`<strong>${Meta.location.LocoType}</strong> №${Meta.location.LocoNumber} ${nearestPoint.approximatedTemp}&deg;C`, {\r\n                    offset: [0, -10, 0]\r\n                })\r\n                .openPopup();\r\n        }\r\n\r\n        await new Promise(resolve => requestAnimationFrame(() => resolve()));\r\n        this.drawRestricted = false;\r\n    },\r\n\r\n    getPixelDistance(eventXY, pointsXY) {\r\n        const pixelDistances = pointsXY.map(({ x, y }) => Math.round(Math.sqrt((x - eventXY.x) ** 2 + (y - eventXY.y) ** 2)));\r\n        const minimalPixelDistance = pixelDistances.reduce((acc, point) => (acc < point ? acc : point), Infinity);\r\n        return minimalPixelDistance;\r\n    },\r\n\r\n    getNiarestPoint({ lat: clientLat, lng: clientLng }, track) {\r\n        const LatLng = L.LatLng;\r\n        return track.reduce(\r\n            (acc, { lat, lng, approximatedTemp }, position) => {\r\n                const clientLatLng = new LatLng(clientLat, clientLng);\r\n                const distance = clientLatLng.distanceTo(new LatLng(lat, lng));\r\n                const oldDistance = clientLatLng.distanceTo(new LatLng(acc.lat, acc.lng));\r\n\r\n                if (distance > oldDistance) {\r\n                    return acc;\r\n                }\r\n                return { lat, lng, distance, position, approximatedTemp };\r\n            },\r\n            {\r\n                lat: track[0].lat,\r\n                lng: track[0].lng,\r\n                distance: Infinity\r\n            }\r\n        );\r\n    },\r\n\r\n    getTrack() {\r\n        const track = [];\r\n        Meta.location.Timestamp.forEach((currentTimestamp, i) => {\r\n            const currentLatitude = Meta.location.Latitude[i];\r\n            const currentLongitude = Meta.location.Longitude[i];\r\n            if (Number.isNaN(Number.parseFloat(currentLatitude)) || Number.isNaN(Number.parseFloat(currentLongitude))) {\r\n                return;\r\n            }\r\n            const currentDate = new Date(currentTimestamp);\r\n            const temperatures = this.getTemperatures();\r\n            const approximatedTemp = this.getApproximatedTemp(currentDate, temperatures);\r\n            track.push({\r\n                lat: currentLatitude,\r\n                lng: currentLongitude,\r\n                date: currentDate,\r\n                approximatedTemp\r\n            });\r\n        }, []);\r\n        return track;\r\n    },\r\n\r\n    getApproximatedTemp(currentDate, temperatures) {\r\n        const dateRange = temperatures.reduce(\r\n            (acc, currentTempData, i) => {\r\n                if (currentTempData.date <= currentDate) {\r\n                    return {\r\n                        ...acc,\r\n                        nearestLower: currentTempData.date > acc.nearestLower ? currentTempData.date : acc.nearestLower,\r\n                        nearestLowerPos: currentTempData.date > acc.nearestLower ? i : acc.nearestLowerPos\r\n                    };\r\n                }\r\n                return {\r\n                    ...acc,\r\n                    nearestHigher: currentTempData.date < acc.nearestHigher ? currentTempData.date : acc.nearestHigher,\r\n                    nearestHigherPos: currentTempData.date < acc.nearestHigher ? i : acc.nearestHigherPos\r\n                };\r\n            },\r\n            {\r\n                nearestHigher: Infinity,\r\n                nearestHigherPos: null,\r\n                nearestLower: -Infinity,\r\n                nearestLowerPos: null\r\n            }\r\n        );\r\n        if (dateRange.nearestHigher === Infinity) {\r\n            return dateRange.nearestLower;\r\n        }\r\n        if (dateRange.nearestHigher === -Infinity) {\r\n            return dateRange.nearestHigher;\r\n        }\r\n        const dateFactor = currentDate - dateRange.nearestLower;\r\n        const dateDifference = dateRange.nearestHigher - dateRange.nearestLower;\r\n        const tempDifference = temperatures[dateRange.nearestHigherPos].temperature - temperatures[dateRange.nearestLowerPos].temperature;\r\n\r\n        return (temperatures[dateRange.nearestLowerPos].temperature + (tempDifference * dateFactor) / dateDifference).toFixed(2);\r\n    },\r\n\r\n    getTemperatures() {\r\n        return Meta.temperatures.Timestamp.map((ts, i) => ({\r\n            date: new Date(ts),\r\n            temperature: Meta.temperatures.OutsideTemp[i]\r\n        }));\r\n    },\r\n\r\n    asap() {\r\n        if (!document.addEventListener) {\r\n            throw new Error('IE is not longer supported...');\r\n        }\r\n        return Promise.all([\r\n            new Promise(resolve => {\r\n                document.readyState === 'complete' ? resolve() : document.addEventListener('readystatechange', () => document.readyState === 'complete' && resolve());\r\n            }),\r\n            new Promise(resolve => document.addEventListener('DOMContentLoaded', resolve())),\r\n            new Promise(resolve => window.addEventListener('load', resolve()))\r\n        ]);\r\n    }\r\n};\r\n\r\nmappApp.asap().then(() => mappApp.go());\r\n"]}